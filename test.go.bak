package main

import (
    "math/big"
    "crypto/sha256"
    "bytes"
    "encoding/binary"
    "log"
    "fmt"
)

func IntToHex(num int64) []byte {
    buff := new(bytes.Buffer)
    err := binary.Write(buff, binary.BigEndian, num)
    if err != nil {
        log.Panic(err)
    }

    return buff.Bytes()
}

func prepareData(nonce int) []byte {
    data := bytes.Join(
        [][]byte{
            IntToHex(int64(24)),
            IntToHex(int64(nonce)),
            IntToHex(int64(133)),
        },
        []byte{},
    )

    return data
}

func Run() (int, []byte) {
    var hashInt big.Int
    var hash [32]byte
    nonce := 0

    for {
        data := prepareData(nonce)
        hash = sha256.Sum256(data)
        hashInt.SetBytes(hash[:])

//         if hashInt.Cmp(pow.target) == -1 {
//             fmt.Printf("\r%x", hash)
//             break
//         } else {
//             nonce ++
//         }
    }
    fmt.Printf("\n\n")

    return nonce, hash[:]
}

func main() {
    var hashInt big.Int

    var target = big.NewInt(123)
    fmt.Println(target)
    fmt.Println(hashInt.Abs(target))
    fmt.Println(hashInt)

    var hash [32]byte
    fmt.Println(hash[:])
    hashInt.SetBytes(hash[:])
    fmt.Println(hashInt)
}
